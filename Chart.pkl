class Global {
  nameOverride: String = ""
  labels: Mapping<String(length > 0), String>
  annotations: Mapping<String(length > 0), String>
}

global: Global 

typealias ServiceType = "ClusterIP"|"NodePort"|"LoadBalancer"
typealias Protocol = "TCP"|"UDP"

class Service {
  enabled: Boolean = true
  type: ServiceType((this == "NodePort").xor(nodePort == null)) = "ClusterIP"
  protocol: Protocol = "TCP"
  port: UInt16 = 80
  targetPort: UInt16
  nodePort: UInt16(isBetween(30000, 32767))?
}

service: Service  

typealias StorageClass = "local-path"|"nfs-client"|"lily-nfs-client"
typealias AccessModes = "ReadWriteOnly"|"ReadOnlyMany"|"ReadWriteMany"|"ReadWriteOncePod"

class Volume {
  name: String(matches(Regex(#"^[\w-]+-(claim|pvc)$"#)))
  skipCreate: Boolean = false
  type: StorageClass 
  accessModes: Listing<AccessModes>(length > 0 && isDistinct)
  storage: String(matches(Regex(#"^\d+[GM]i$"#)))
}

volumes: Listing<Volume>(isDistinctBy((it) -> it.name))

typealias Value = Int|String|Boolean

configmap: Mapping<String(length > 0), Value>

secrets: Mapping<String(length > 0), Value>
